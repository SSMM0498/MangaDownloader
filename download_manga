#!/usr/bin/env python3
#coding:utf-8

# ! Executable
# ! Git
# ! Docker

import sys
import os
from urllib.request import Request, urlopen

def is_exist_chapter(r):
    """
        Check if the chapter passed exist

        Arguments:
            t {HTTPResponse} -- Response of a url opened
        
        Returns:
            {bool} -- Exist chapter or not
    """
    o = 'notexist'
    try:
        r.index(" is marked as completed. Possibly there will be no new chapter for this manga.")
    except ValueError:
        o = 'exist'

    if r == "b''" and o == 'notexist':
        return False
    else:
        return True

def is_valid_chapter_syntax(c):
    """
        Check if the chapter passed are numeric

        Arguments:
            c{list} -- list of chapter name

        Returns:
            {bool} -- Are numeric or not
    """

    for k in c:
        if k.isnumeric() == False:
            return False
    return True

def create_chapter_list(chap):
    """
        Create a chapter with string passed in argument

        Arguments:
            chap{str}-- chapter

        Returns:
            {bool}-- Are numeric or not
            {list}-- Chapter list
    """

    if '-' in chap:
        c = chap.split('-', maxsplit=1)
        if is_valid_chapter_syntax(c):
            return range(int(c[0]),int(c[1]))
        else:
            print("Use a valid syntax for chapter list")
            sys.exit()
    elif ',' in chap:
        c = chap.split(',')
        if is_valid_chapter_syntax(c):
            return c
        else:
            print("Use a valid syntax for chapter list")
            sys.exit()
    else:
        if is_valid_chapter_syntax(chap):
            return [chap]
        else:
            print("Use a valid syntax for chapter list")
            sys.exit()

def create_url(m, c):
    """
        Create an url with the manga name and the chapiter number

        Arguments:
            m{str} -- manga name
            c{int}-- chapter number

        Returns:
            {str} -- url created
    """

    c = str(c)
    return "https://www.mangapanda.com/" + m + "/" + c

def get_nbof_page_manga(r):
    """
        Get number of chapter's page_manga

        Arguments:
            r{str}-- web site result

        Returns:
            {tuple} -- link, page_manga number
    """

    f = r.index('</select> of ')
    e = r.index('</div>', f+13)
    return int(r[f+13 : e])

def read_url(u):
    """
        Get the html content in the url 

        Arguments:
            r{str}-- web site result

        Returns:
            {str} -- html content
    """

    req = Request(u, headers={'User-Agent': 'Mozilla/5.0'})
    reqopen = urlopen(req)
    return str(reqopen.read())

def get_info_of_page_manga(r):
    """
        Get the url and filename of a page_manga

        Arguments:
            r{str}-- web site result

        Returns:
            {tuple} -- link, page_manga number
    """

    c = r.index('src="https://i')
    d = r.index('.jpg"', c+14)
    link = r[c+5:d+4]
    # fname = link.split('/')[-1]
    # ret = {'link':link, 'fname':fname}
    # return ret
    return link

def download_page_manga(u, f):
    """
        Download the image of page manga 

        Arguments:
            u{str}-- url of the page
            f{str}-- image name
    """

    a = Request(u, headers={'User-Agent': 'Mozilla/5.0'})
    b = urlopen(a)
    c = open(f, 'wb')
    block_sz = 8192
    while True:
        buffer = b.read(block_sz)
        if not buffer:
            break
        c.write(buffer)

    c.close()

###########################################################################################################
#########################################          Main         ###########################################
###########################################################################################################

try:
    manga_name = sys.argv[1]
    chapter = sys.argv[2]
except IndexError :
    print("Missing manga name or/and manga chapter")
    sys.exit()
       
mainFolder = False
chapterList = create_chapter_list(chapter)

for chap in chapterList:
    print(manga_name.upper())
    url = create_url(manga_name, chap)
    urlContent = read_url(url)

    if is_exist_chapter(urlContent):
        pageNum = get_nbof_page_manga(urlContent)
        print("Chapter - {}".format(chap))
        chapterFolder = 'chapitre'+chap
        if mainFolder == False:
            try:
                os.mkdir("./"+manga_name)
            except FileExistsError:
                pass
            finally:
                mainFolder = True

        try:
            os.mkdir("./"+manga_name+"/"+chapterFolder)
        except FileExistsError:
            pass

        urlimage = get_info_of_page_manga(urlContent)
        fileName = "./"+manga_name+"/"+chapterFolder+"/" + manga_name + "-" + chap + '-1.jpg'
        print(fileName)
        download_page_manga(urlimage, fileName)
        
        for k in range(2, pageNum + 1):
            urlname = url + "/" + str(k)
            urlContent = read_url(urlname)
            urlimage = get_info_of_page_manga(urlContent)
            fileName = "./"+manga_name+"/"+chapterFolder+"/"+ manga_name + "-" + chap + "-" + str(k) + ".jpg"
            print(fileName)
            download_page_manga(urlimage, fileName)
    else:
        print("Chapter {} does not exist".format(chap))